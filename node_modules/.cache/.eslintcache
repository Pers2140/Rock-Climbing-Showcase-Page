[{"/home/node/Rock-Climbing-Showcase-Page/reactfrend/src/index.js":"1","/home/node/Rock-Climbing-Showcase-Page/reactfrend/src/App.js":"2","/home/node/Rock-Climbing-Showcase-Page/reactfrend/src/Components/Form.js":"3","/home/node/Rock-Climbing-Showcase-Page/reactfrend/src/Components/GMap.js":"4","/home/node/Rock-Climbing-Showcase-Page/reactfrend/src/Components/InfoBar.js":"5","/home/node/Rock-Climbing-Showcase-Page/reactfrend/src/Components/gymMarker.js":"6","/home/node/Rock-Climbing-Showcase-Page/reactfrend/src/Components/Mapbox.js":"7"},{"size":199,"mtime":1621369254000,"results":"8","hashOfConfig":"9"},{"size":164,"mtime":1621369254000,"results":"10","hashOfConfig":"9"},{"size":3092,"mtime":1621369254000,"results":"11","hashOfConfig":"9"},{"size":2310,"mtime":1620092551000,"results":"12","hashOfConfig":"9"},{"size":968,"mtime":1621369254000,"results":"13","hashOfConfig":"9"},{"size":681,"mtime":1620092551000,"results":"14","hashOfConfig":"9"},{"size":2960,"mtime":1621536557409,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"12m7ysh",{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},"/home/node/Rock-Climbing-Showcase-Page/reactfrend/src/index.js",[],"/home/node/Rock-Climbing-Showcase-Page/reactfrend/src/App.js",["36"],"import React, {useState} from 'react'\nimport UserForm from './Components/Form'\n\n\nfunction App() {\n  \n  return (\n        <UserForm />\n      );\n}\n\nexport default App;","/home/node/Rock-Climbing-Showcase-Page/reactfrend/src/Components/Form.js",["37","38","39","40"],"import React from 'react'\nimport { useState, useEffect, useRef } from 'react'\nimport Mapbox from './Mapbox'\nimport Infobar from './InfoBar'\nimport data from '../data.json'\nimport './Styles/sidebar.css'\n\nfunction UserForm() {\n    // const [eventData, setEventData] = useState([])\n    // const [loading, setLoading] = useState(false)\n\n    // useEffect(() => {\n    //     const fetchEvents = async () =>{\n    //         setLoading(true)\n    //         const res = await fetch(' http://127.0.0.1:8080/data.json')\n    //         const {locName} = await res.json()\n\n    //         setEventData(locName)\n    //         setLoading(false)\n    //     }\n\n    //     fetchEvents()\n    //     console.log(eventData)\n    // },[])\n\n   \n    // let avg_center = {\n    //     lat: 38.54555438314078,\n    //     lng: -97.9853579502318\n    // }\n    const search_results = {}\n    const [search, setSearch] = useState('')\n    const [filtered_data, setfiltered_data] = useState({})\n    const [geoLoc, setGeoLoc] = useState([-90.9, 40])\n\n    // When search value changes check for matches\n    useEffect(() => {\n        // return filtered out data Object to plug into map and infobox\n        Object.keys(data).map(key => {\n            // if state equals to search add to filtered data\n            if (search.toLowerCase() == data[key]['state'].toLowerCase()) {\n                search_results[key] = data[key]\n                setfiltered_data(search_results)\n\n                // set geo location\n                if (Object.keys(search_results).length) {\n                    console.log('search_results exist centering')\n                    const geoLat = Math.round(search_results[Object.keys(search_results)[0]].googleInfo.geoLoc[0])\n                    const geoLng = Math.round(search_results[Object.keys(search_results)[0]].googleInfo.geoLoc[1])\n\n                    setGeoLoc([geoLng, geoLat])\n                } else {\n                    console.log('search_results does not exist')\n                }\n            }\n            else {\n                console.log('nothing to add')\n            }\n        })\n    }, [search]) // useEffect looks at search for changes and updates as needed\n\n    return (\n        <>\n            <div style={{background:\"#3f4f78\"}}class=\"container-fluid\" >\n                <div class=\"row\" >\n                    <div class=\"col-md-9 col-sm-12 \" >\n                    <input className=\"search\" type=\"text\" onChange={(e) => setSearch(e.target.value)} placeholder=\"Search\"></input>\n                        {/* <GMap eventData={filtered_data} geoLoc={geoLoc}/> */}\n                        <Mapbox eventData={filtered_data} geoLoc={geoLoc} />\n                    </div><br></br>\n                    <div class=\"list-box col-md-3 col-sm-12\" >\n                        {\n                            Object.keys(filtered_data).map(key => {\n                                return (<Infobar gym_data={filtered_data[key]} />)\n                            })\n                        }\n                    </div>\n                </div>\n            </div>\n        </>\n\n    )\n}\n\nexport default UserForm;","/home/node/Rock-Climbing-Showcase-Page/reactfrend/src/Components/GMap.js",["41","42","43","44"],"import React from 'react'\nimport { useState, useEffect } from 'react'\nimport GoogleMapReact from 'google-map-react'\nimport GymMarker from './gymMarker'\n\n// define constants\n\nconst GMap = ({eventData}) => {\n    \n    let center = {lat: 38.54555438314078,\n        lng: -97.9853579502318}\n    const zoom = 8\n    const mapBoxStyle = {\n        width: \"100%\",\n        height: \"100vh\",\n    }\n    \n    // find avg lat and lng to center search\n    const avg_loc = (data) => {\n        let avg_GeoLoc = {}\n        Object.keys(data).map( key =>{\n            // console.log(data[key]['googleInfo']['geoLoc'])\n            Object.assign(avg_GeoLoc,data[key]['googleInfo']['geoLoc'])\n        })\n        console.log(avg_GeoLoc)\n        return avg_GeoLoc\n    }\n    // center = avg_loc(eventData)\n    \n    // create array and to add name, rating and geoLoc\n    const locMarkers = []\n    const Markers = () => {\n        for (const i in Object.keys(eventData)) {\n            // console.log(eventData[Object.keys(eventData)[i]])\n            const gInfo = eventData[Object.keys(eventData)[i]]['googleInfo']\n\n            const lat = gInfo['geoLoc'][0]\n            const lng = gInfo['geoLoc'][1]\n            const name = gInfo['correct_name']\n            const rating = gInfo['rating']\n\n            if (typeof (lat) === \"number\") {\n                locMarkers.push(\n                    {\n                        name: name,\n                        rating: rating,\n                        geoLoc: [lat, lng]\n                    }\n                )\n            }\n        }\n    }\n    Markers()\n\n\n\n    return (\n        <div style={mapBoxStyle} className=\"map\">\n            <GoogleMapReact\n                bootstrapURLKeys={{ key: 'AIzaSyDtggfQvcGa_TB9YlG3vWRMKAe2Q4orUr8' }}\n                defaultCenter={center}\n                defaultZoom={zoom}\n            >\n\n                {locMarkers.map(ev => {\n                    // console.log(ev[0],ev[1])\n                    return <GymMarker ginfo={ev} lat={ev['geoLoc'][0]} lng={ev['geoLoc'][1]} />\n                })}\n\n            </GoogleMapReact>\n            {/* {locationInfo && <LocationInfoBox info={locationInfo} />} */}\n        </div>\n    )\n}\n\nGMap.defaultProps = {\n    center: {\n        lat: 38.54555438314078,\n        lng: -97.9853579502318\n    },\n    zoom: 5\n}\n\nexport default GMap","/home/node/Rock-Climbing-Showcase-Page/reactfrend/src/Components/InfoBar.js",["45","46"],"import React from 'react'\n\nexport default function InfoBar({gym_data}) {\n\n    // Set default values\n    let link= '', gym_name= '', rating= '', address = '',address_geo\n    \n    // Try to assign values from gym_data\n    try{\n        link = \"http://\"+gym_data.gym_info[0]\n        gym_name = gym_data.googleInfo.correct_name\n        rating = \"‚≠ê \".repeat(gym_data.googleInfo.rating)\n        address = gym_data.gym_info[1].toUpperCase()\n     \n        address_geo = `http://maps.google.com//?ll=${gym_data.googleInfo.geoLoc[0]},${gym_data.googleInfo.geoLoc[1]}`\n    }catch{\n\n    }\n\n    return (\n        <>\n        <div class=\"card info-bar\" >\n        <div class=\"card-body\">\n        <   a target=\"_blank\"  href={link}><h3 class=\"card-title title\">{gym_name}</h3></a>\n            <p class=\"card-text\">{rating}</p>\n            <a target=\"_blank\" href={address_geo}><p class=\"card-text\"><h6>{address}</h6></p></a>\n        \n        </div>\n        </div>\n\n        </>\n    )\n}\n","/home/node/Rock-Climbing-Showcase-Page/reactfrend/src/Components/gymMarker.js",["47"],"\nexport default function GymMarker({ lat, lng, onHover, ginfo }) {\n    const marker = {\n        color: \"red\"\n    }\n\n                \n                const content = `${ginfo[\"name\"]} \\n  ${ginfo[\"rating\"] }`\n    return (\n\n        <div className=\"gym-marker\" onHover={onHover}>\n           \n\n        <a href=\"#\" data-toggle=\"tooltip\" title={content}>\n        <svg style={marker} xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"30\" fill=\"currentColor\" class=\"bi bi-geo-alt-fill\" viewBox=\"0 0 16 16\">\n                    <path d=\"M8 16s6-5.686 6-10A6 6 0 0 0 2 6c0 4.314 6 10 6 10zm0-7a3 3 0 1 1 0-6 3 3 0 0 1 0 6z\" />\n                </svg>\n        </a>\n\n        </div>\n    )\n}\n","/home/node/Rock-Climbing-Showcase-Page/reactfrend/src/Components/Mapbox.js",["48","49","50","51"],"import React, { useRef, useEffect, useState } from 'react';\nimport './Styles/mapbox.css'\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport mapboxgl from '!mapbox-gl'; // eslint-disable-line import/no-webpack-loader-syntax\n\nmapboxgl.accessToken =\n  'pk.eyJ1IjoiZGJvaS1jdXJyeSIsImEiOiJja29kbm54MDYwMXhpMm9qeGw2aHN6aWpkIn0.wlCNtWwP70rQtX6J8vsX0w';\n\nconst Map = ({ eventData,geoLoc }) => {\n  const mapContainerRef = useRef(null);\n  const [lng, setLng] = useState(-97.65);\n  const [lat, setLat] = useState(40.84);\n  const [zoom, setZoom] = useState(3);\n  const [center, setCenter] = useState(setLat,setLng);\n  \n  const setMarkers = (map) => {\n    Object.keys(eventData).map(key => {\n      try {\n        // Getting gym geo location and rounding value\n        // console.log(eventData[key].googleInfo.geoLoc)\n        const getLat = Math.round(eventData[key].googleInfo.geoLoc[0])\n        const getLng = Math.round(eventData[key].googleInfo.geoLoc[1])\n        // Geting name to display\n        const name = eventData[key].googleInfo.correct_name.substr(0,16)+\"...\"\n\n        // console.log(eventData[key].gym_info[0])\n        const gym_site = eventData[key].gym_info[0]\n        if (getLng <= 90 && getLng <= 90) {\n\n          // create a DOM element for the marker\n          var el = document.createElement('div');\n          el.className = 'marker';\n          el.innerHTML = `<a target=\"_blank\"  href=\"http://${gym_site}\"><h5 class=\"markerText\">${name}<img style=\"visibility:visible;width:50px;height:50px\"src=\"https://www.flaticon.com/premium-icon/icons/svg/4357/4357659.svg\"><h5><a>`\n          \n          // create map marker \n          new mapboxgl.Marker(el,\n            { color: \"black\",\n            }).setLngLat({ lat: getLat, lng: getLng }).addTo(map)\n        } else {\n          console.log(\"something went wrong creating marker div\")\n        }\n      } catch { }\n    })}\n\n  // Initialize map when component mounts\n  useEffect(() => {\n    \n    const map = new mapboxgl.Map({\n      container: mapContainerRef.current,\n      style: 'mapbox://styles/mapbox/outdoors-v11',\n      center: geoLoc,\n      zoom: zoom,\n    });\n    \n    // Set up Markers and zoom\n    setZoom(6)\n    setMarkers(map)\n\n    // Add navigation control (the +/- zoom buttons)\n    map.addControl(new mapboxgl.NavigationControl(), 'top-right');\n\n    map.on('move', () => {\n      setLng(map.getCenter().lng.toFixed(4));\n      setLat(map.getCenter().lat.toFixed(4));\n      setZoom(map.getZoom().toFixed(2));\n    });\n\n    // Clean up on unmount\n    return () => map.remove();\n  }, [eventData]); // when user searches eventData updates and useEffect refreshes page\n\n  return (\n    <div>\n      <div className=\"sidebarStyle\">\n      </div>\n      <div style={{ \"position\":\"relative\",\"text-align\":\"right\",\"color\":\"white\",\"padding\":\"5px\"}}>\n        Longitude: {lng} | Latitude: {lat} | Zoom: {zoom}\n      </div>\n      <div  className=\"map-container\" ref={mapContainerRef} />\n    </div>\n  );\n};\n\nexport default Map;",{"ruleId":"52","severity":1,"message":"53","line":1,"column":16,"nodeType":"54","messageId":"55","endLine":1,"endColumn":24},{"ruleId":"52","severity":1,"message":"56","line":2,"column":31,"nodeType":"54","messageId":"55","endLine":2,"endColumn":37},{"ruleId":"57","severity":1,"message":"58","line":39,"column":35,"nodeType":"59","messageId":"60","endLine":39,"endColumn":37},{"ruleId":"61","severity":1,"message":"62","line":41,"column":38,"nodeType":"63","messageId":"64","endLine":41,"endColumn":40},{"ruleId":"65","severity":1,"message":"66","line":60,"column":8,"nodeType":"67","endLine":60,"endColumn":16,"suggestions":"68"},{"ruleId":"52","severity":1,"message":"53","line":2,"column":10,"nodeType":"54","messageId":"55","endLine":2,"endColumn":18},{"ruleId":"52","severity":1,"message":"69","line":2,"column":20,"nodeType":"54","messageId":"55","endLine":2,"endColumn":29},{"ruleId":"52","severity":1,"message":"70","line":19,"column":11,"nodeType":"54","messageId":"55","endLine":19,"endColumn":18},{"ruleId":"57","severity":1,"message":"58","line":21,"column":36,"nodeType":"59","messageId":"60","endLine":21,"endColumn":38},{"ruleId":"71","severity":1,"message":"72","line":24,"column":9,"nodeType":"73","endLine":24,"endColumn":44},{"ruleId":"71","severity":1,"message":"72","line":26,"column":13,"nodeType":"73","endLine":26,"endColumn":51},{"ruleId":"74","severity":1,"message":"75","line":14,"column":9,"nodeType":"73","endLine":14,"endColumn":59},{"ruleId":"52","severity":1,"message":"76","line":14,"column":10,"nodeType":"54","messageId":"55","endLine":14,"endColumn":16},{"ruleId":"52","severity":1,"message":"77","line":14,"column":18,"nodeType":"54","messageId":"55","endLine":14,"endColumn":27},{"ruleId":"57","severity":1,"message":"58","line":17,"column":36,"nodeType":"59","messageId":"60","endLine":17,"endColumn":38},{"ruleId":"65","severity":1,"message":"78","line":70,"column":6,"nodeType":"67","endLine":70,"endColumn":17,"suggestions":"79"},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useRef' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'search_results'. Either include it or remove the dependency array.","ArrayExpression",["80"],"'useEffect' is defined but never used.","'avg_loc' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'center' is assigned a value but never used.","'setCenter' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'geoLoc', 'setMarkers', and 'zoom'. Either include them or remove the dependency array.",["81"],{"desc":"82","fix":"83"},{"desc":"84","fix":"85"},"Update the dependencies array to be: [search, search_results]",{"range":"86","text":"87"},"Update the dependencies array to be: [eventData, geoLoc, setMarkers, zoom]",{"range":"88","text":"89"},[2092,2100],"[search, search_results]",[2534,2545],"[eventData, geoLoc, setMarkers, zoom]"]